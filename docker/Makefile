# output binary
BIN := bin/oregex
BIN_VALGRIND := bin/oregex-valgrind

LIBRARY_PATH := bin
LIBRARY_NAME := oregex
LIBRARY := $(LIBRARY_PATH)/lib$(LIBRARY_NAME).so

# source files
SRCS := $(shell find . -type f -name '*.cpp')
LIB_SRCS := $(shell find ./src -type f -name '*.cpp')
TEST_SRCS := $(shell find ./test -type f -name '*.cpp')

# files included in the tarball generated by 'make dist' (e.g. add LICENSE file)
DISTFILES := $(BIN) $(BIN_VALGRIND) $(LIBRARY)

# intermediate directory for generated object files
OBJDIR := build/.o

# intermediate directory for generated dependency files
DEPDIR := build/.d

# object files, auto generated from source files
OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SRCS)))
TEST_OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(TEST_SRCS)))
LIB_OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(LIB_SRCS)))
# dependency files, auto generated from source files
DEPS := $(patsubst %,$(DEPDIR)/%.d,$(basename $(SRCS)))

# compilers (at least gcc and clang) don't create the subdirectories automatically
$(shell mkdir -p $(dir $(OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(DEPS)) >/dev/null)

# C compiler
CC := clang++
# C++ compiler
CXX := clang++
# linker
LD := clang++

# C flags
CFLAGS := -std=c17
# C++ flags
CXXFLAGS := -std=c++17
# C/C++ flags
OPTIMIZATION_FLAG := -O3
CPPFLAGS := -g $(OPTIMIZATION_FLAG) -Wall -Wextra -pedantic -fPIC -DBOOST_STACKTRACE_USE_ADDR2LINE
# linker flags
LDFLAGS :=-L$(LIBRARY_PATH) -l$(LIBRARY_NAME)
LDLIBS :=-ldl
# include paths
INCLUDEPATHS :=-Ivendor/boost_1_73_0
# flags required for dependency generation; passed to compilers
DEPFLAGS = -MT $@ -MD -MP -MF $(DEPDIR)/$*.Td

# compile C source files
COMPILE.c = $(CC) $(DEPFLAGS) $(CFLAGS) $(CPPFLAGS) -c -o $@
# compile C++ source files
COMPILE.cc = $(CXX) $(INCLUDEPATHS) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c -o $@
# link object files to binary
LINK.so = $(LD) -shared -o $@
LINK.o = $(LD) $(LDFLAGS) $(LDLIBS) -o $@
LINK_VALGRIND.o = $(LD) $(LDLIBS) -o $@
# precompile step
PRECOMPILE =
# postcompile step
POSTCOMPILE = mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d

all: $(DISTFILES)

test: $(BIN)
	# $(BIN) <testName> -c <sectionName>
	$(BIN)

memcheck: $(BIN_VALGRIND)
	#Â valgrind --leak-check=yes $(BIN_VALGRIND) <testName> -c <sectionName>
	valgrind --leak-check=yes $(BIN_VALGRIND)

clean:
	$(RM) -r $(OBJDIR) $(DEPDIR) $(DISTFILES)

$(LIBRARY): $(LIB_OBJS)
	$(LINK.so) $^
	@echo "\nLibrary generated\n\n\n\n"

$(BIN_VALGRIND): $(LIB_OBJS) $(TEST_OBJS)
	$(LINK_VALGRIND.o) $(LIB_OBJS) $(TEST_OBJS)

$(BIN): $(LIBRARY) $(TEST_OBJS)
	$(LINK.o) $(TEST_OBJS)

$(OBJDIR)/%.o: %.cpp
$(OBJDIR)/%.o: %.cpp $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

.PRECIOUS = $(DEPDIR)/%.d
$(DEPDIR)/%.d: ;

-include $(DEPS)
